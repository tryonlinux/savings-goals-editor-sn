{"version":3,"sources":["components/Editor.tsx","reportWebVitals.ts","components/Balance.tsx","components/GoalItem.tsx","components/ActionsCell.tsx","components/SavingsCard.tsx","components/Goals.tsx","index.tsx"],"names":["HtmlElementId","HtmlClassName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Balance","props","state","savingsBalance","handleInputChange","bind","handleOnBlur","moneyValidation","event","value","target","this","setState","saveBalance","balance","updateSavingsBalance","toString","parseFloat","Row","Col","md","span","offset","className","Form","onSubmit","e","preventDefault","Group","controlId","Control","type","size","placeholder","name","onChange","onBlur","React","initialState","index","id","itemGoalCost","GoalItem","editMode","goal","currentGoal","xs","Label","Button","variant","onClick","handleSubmit","uuidv4","onCancelAddGoal","ActionsCell","handleViewEdit","fill","handleDelete","Component","SavingsCard","percentage","now","Math","round","bankBalance","progressInstance","ProgressBar","max","label","progressBarColor","Card","body","Title","Badge","pill","sm","editGoal","deleteGoal","Goals","handleOnDragEnd","result","destination","items","Array","from","goals","splice","source","reorderedItem","updateGoals","onDragEnd","droppableId","provided","droppableProps","ref","innerRef","map","draggableId","draggableProps","dragHandleProps","printUrl","text","addGoal","loaded","keyMap","Map","Editor","editorKit","configureEditorKit","delegate","EditorKitDelegate","setEditorRawText","data","JSON","parse","clearUndoHistory","getElementsBySelector","generateCustomPreview","entries","html","length","plain","EditorKit","mode","supportsFilesafe","saveNote","onEditorValueChanged","stringify","error","console","log","onFocus","onKeyDown","set","key","get","onKeyUp","delete","onAddGoal","updateIndexes","handleSubmitOfGoal","goalItem","editGoalID","goalID","findIndex","x","snComponent","tabIndex","Container","fluid","find","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58dfffa5.chunk.js","sourcesContent":["import { PlusCircleIcon } from \"@primer/octicons-react\";\nimport React from \"react\";\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\nimport { EditorKit, EditorKitDelegate } from \"sn-editor-kit\";\nimport Balance from \"./Balance\";\nimport GoalItem from \"./GoalItem\";\nimport Goals from \"./Goals\";\nexport enum HtmlElementId {\n  snComponent = \"sn-component\",\n  textarea = \"textarea\",\n}\n\nexport enum HtmlClassName {\n  snComponent = \"sn-component\",\n  textarea = \"sk-input contrast textarea\",\n}\nexport interface Goal {\n  index: number;\n  id: string;\n  itemGoalCost: number;\n  name: string;\n}\n\nexport interface EditorInterface {\n  printUrl: boolean;\n  text: string;\n  goals: Goal[];\n  savingsBalance: number;\n  addGoal: boolean;\n  editGoal: boolean;\n  loaded: boolean;\n  editGoalID?: string;\n}\nconst initialState = {\n  printUrl: false,\n  text: \"\",\n  goals: [],\n  addGoal: false,\n  editGoal: false,\n  savingsBalance: 0.0,\n  loaded: false,\n};\n\nlet keyMap = new Map();\n\nexport default class Editor extends React.Component<{}, EditorInterface> {\n  editorKit: any;\n\n  constructor(props: EditorInterface) {\n    super(props);\n    this.state = initialState;\n\n    this.updateGoals = this.updateGoals.bind(this);\n    this.updateSavingsBalance = this.updateSavingsBalance.bind(this);\n    this.onAddGoal = this.onAddGoal.bind(this);\n    this.onCancelAddGoal = this.onCancelAddGoal.bind(this);\n    this.updateIndexes = this.updateIndexes.bind(this);\n    this.handleSubmitOfGoal = this.handleSubmitOfGoal.bind(this);\n    this.editGoal = this.editGoal.bind(this);\n    this.deleteGoal = this.deleteGoal.bind(this);\n  }\n  componentDidMount() {\n    this.configureEditorKit();\n  }\n\n  configureEditorKit = () => {\n    let delegate = new EditorKitDelegate({\n      /** This loads every time a different note is loaded */\n      setEditorRawText: (text: string) => {\n        if (text) {\n          let data = JSON.parse(text);\n          this.setState({\n            ...initialState,\n            goals: data.goals,\n            savingsBalance: data.savingsBalance,\n            text,\n            loaded: true,\n          });\n        } else {\n          this.setState({\n            ...initialState,\n            loaded: true,\n            text,\n          });\n        }\n      },\n\n      clearUndoHistory: () => {},\n      getElementsBySelector: () => [],\n      generateCustomPreview: (text: string) => {\n        let entries = [];\n        try {\n          entries = JSON.parse(text);\n        } finally {\n          // eslint-disable-next-line no-unsafe-finally\n          return {\n            html: `<div> Balance:$${entries.savingsBalance} <br> Goals: ${entries.goals.length}</div>`,\n            plain: `Balance:$${entries.savingsBalance}/Goals: ${entries.goals.length}`,\n          };\n        }\n      },\n    });\n\n    this.editorKit = new EditorKit({\n      delegate: delegate,\n      mode: \"plaintext\",\n      supportsFilesafe: false,\n    });\n  };\n  /**\n   * Saves the note by creating a JSON object of goals and current balance.\n   *\n   */\n  saveNote = () => {\n    /** This will work in an SN context, but breaks the standalone editor,\n     * so we need to catch the error\n     */\n    try {\n      this.editorKit.onEditorValueChanged(\n        JSON.stringify({\n          goals: this.state.goals,\n          savingsBalance: this.state.savingsBalance,\n        })\n      );\n    } catch (error) {\n      console.log(\"Error saving note:\", error);\n    }\n  };\n\n  onBlur = (e: React.FocusEvent) => {};\n\n  onFocus = (e: React.FocusEvent) => {};\n\n  onKeyDown = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.set(e.key, true);\n    // Do nothing if 'Control' and 's' are pressed\n    if (keyMap.get(\"Control\") && keyMap.get(\"s\")) {\n      e.preventDefault();\n    }\n  };\n\n  onKeyUp = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.delete(e.key);\n  };\n  /**\n   * Returns the sum of two numbers.\n   *\n   * @param goals - An array of Goal Objects that consist of the goals you would like to update. This is basically just a wrapper function for setting the state and calling update indexes from children components\n   * @returns nothing\n   *\n   */\n  updateGoals(goals: Goal[]): void {\n    this.setState(\n      {\n        goals,\n      },\n      () => {\n        this.updateIndexes();\n      }\n    );\n  }\n  /**\n   * Resets the index number for each goal in the state Goal Array so they are sequential by the order in which they are in the array. This is called whenever you change the order (i.e. delete or add a goal)\n   *\n   * @returns void\n   *\n   */\n  updateIndexes(): void {\n    let updateGoals = this.state.goals.map((goalItem, index) => {\n      goalItem.index = index;\n      return goalItem;\n    });\n    this.setState({ goals: updateGoals }, () => {\n      this.saveNote();\n    });\n  }\n  /**\n   * Sets the savings balance state and saves to the SN editor, called by Balance Component\n   *\n   * @param savingsBalance - The Balance you want to save\n   * @returns void\n   *\n   */\n  updateSavingsBalance(savingsBalance: number): void {\n    this.setState(\n      {\n        savingsBalance,\n      },\n      () => {\n        this.saveNote();\n      }\n    );\n  }\n\n  /**\n   * Sets the view states for addGoal to true so the editor switches to the add goal view (and sets editGoal to false to be safe)\n   *\n   * @returns void\n   *\n   */\n  onAddGoal(): void {\n    this.setState({\n      addGoal: true,\n      editGoal: false,\n    });\n  }\n  /**\n   * Resets the addGoal/editGoal states so the view switches back to the main goal view\n   *\n   * @returns void\n   *\n   */\n  onCancelAddGoal(): void {\n    this.setState({\n      addGoal: false,\n      editGoal: false,\n      editGoalID: \"\",\n    });\n  }\n  /**\n   * Sets the editGoal State and editGoalID so the view updates to the Goal Item view in edit mode\n   *\n   * @param goalID - The id of the Goal you wan to edit\n   * @returns void\n   *\n   */\n  editGoal(goalID: string): void {\n    this.setState({\n      addGoal: false,\n      editGoal: true,\n      editGoalID: goalID,\n    });\n  }\n  /**\n   * Depending on if editGoal is set to true, it either replaces the goal in the Goals state with the updated Goal values, or it adds a new goal to the Goals state. Then it will call saveNotes to write back to the editor (or updateIndexes > saveNotes in add mode)\n   *\n   * @param goal - The goal you are either editing or adding to the Goals Array\n   * @returns void\n   *\n   */\n  handleSubmitOfGoal(goal: Goal): void {\n    if (this.state.editGoal) {\n      let goals = this.state.goals;\n      let index = goals.findIndex((x: Goal) => x.id === goal.id);\n      goals.splice(index, 1, goal);\n      this.setState({ goals, addGoal: false, editGoal: false }, () => {\n        this.saveNote();\n      });\n    } else {\n      this.setState(\n        { goals: [...this.state.goals, goal], addGoal: false, editGoal: false },\n        () => {\n          this.updateIndexes();\n        }\n      );\n    }\n  }\n  /**\n   * Deletes a goal from the Goals state and calls saveNote to save back to the editor\n   *\n   * @param goalID - The ID of the goal you want to delete\n   * @returns void\n   *\n   */\n  deleteGoal(goalID: string) {\n    let goals = this.state.goals;\n    let index = goals.findIndex((x: Goal) => x.id === goalID);\n    goals.splice(index, 1);\n    this.setState({ goals }, () => {\n      this.saveNote();\n    });\n  }\n\n  render() {\n    return (\n      <div\n        className={\n          HtmlElementId.snComponent + (this.state.printUrl ? \" print-url\" : \"\")\n        }\n        id={HtmlElementId.snComponent}\n        tabIndex={0}\n      >\n        <Container fluid>\n          <div id=\"header\">\n            <Row>\n              <Col>\n                <Button onClick={this.onAddGoal} variant=\"dark\">\n                  <PlusCircleIcon size={16} />\n                </Button>\n              </Col>\n            </Row>\n          </div>\n\n          {this.state.loaded ? (\n            this.state.addGoal ? (\n              <GoalItem\n                onCancelAddGoal={this.onCancelAddGoal}\n                handleSubmit={this.handleSubmitOfGoal}\n                editMode={false}\n              />\n            ) : this.state.editGoal ? (\n              <GoalItem\n                onCancelAddGoal={this.onCancelAddGoal}\n                handleSubmit={this.handleSubmitOfGoal}\n                goal={this.state.goals.find(\n                  (goal) => goal.id === this.state.editGoalID\n                )}\n                editMode={true}\n              />\n            ) : (\n              <div>\n                <Balance\n                  savingsBalance={this.state.savingsBalance}\n                  updateSavingsBalance={this.updateSavingsBalance}\n                />\n                <Row>\n                  <Col>\n                    <Goals\n                      goals={this.state.goals}\n                      updateGoals={this.updateGoals}\n                      savingsBalance={this.state.savingsBalance}\n                      editGoal={this.editGoal}\n                      deleteGoal={this.deleteGoal}\n                    />\n                  </Col>\n                </Row>\n              </div>\n            )\n          ) : (\n            <div>Loading...</div>\n          )}\n        </Container>\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from \"react\";\nimport { Col, Form, Row } from \"react-bootstrap\";\nexport interface BalanceProps {\n  savingsBalance: number;\n  updateSavingsBalance: (savingsBalance: number) => void;\n}\n\nexport interface BalanceState {\n  savingsBalance: number;\n}\n\nclass Balance extends React.Component<BalanceProps, BalanceState> {\n  constructor(props: BalanceProps) {\n    super(props);\n    this.state = {\n      savingsBalance: this.props.savingsBalance\n        ? this.props.savingsBalance\n        : 0.0,\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleOnBlur = this.handleOnBlur.bind(this);\n    this.moneyValidation = this.moneyValidation.bind(this);\n  }\n  handleInputChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    const target = event.target;\n    const value = target.value;\n\n    this.setState({\n      savingsBalance: this.moneyValidation(value),\n    });\n  }\n  handleOnBlur(event: React.FocusEvent<HTMLInputElement>): void {\n    const target = event.target;\n    const value = target.value;\n    if (value) {\n      this.saveBalance(value);\n    }\n  }\n  /**\n   * Internal function to make sure the value is validated before calling hte UpdateSavingsBalance function in the main Editor Component to save and update the State/Editor for the new balance\n   *\n   * @param balance - The Balance you want to save\n   * @returns void\n   *\n   */\n  saveBalance(balance: string): void {\n    if (balance) {\n      this.setState(\n        {\n          savingsBalance: this.moneyValidation(balance),\n        },\n        () =>\n          this.props.updateSavingsBalance(\n            this.moneyValidation(this.state.savingsBalance.toString())\n          )\n      );\n    }\n  }\n  //TODO: Do input validation here and return 0 if bad\n  /**\n   * Validates the balance you type in to the Balance Text Box to make sure it is formatted correctly and converts to an number type\n   *\n   * @param value - The Balance you want to save as a string\n   * @returns - The value as a number parsed correctly\n   *\n   */\n  moneyValidation(value: string): number {\n    return parseFloat(value) || 0;\n  }\n  render() {\n    return (\n      <div>\n        {\" \"}\n        <Row>\n          <Col md={{ span: 6, offset: 3 }}>\n            <h1 className=\"text-center\">~Savings Balance~</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={{ span: 6, offset: 3 }}>\n            <Form\n              onSubmit={(e: React.FormEvent) => {\n                e.preventDefault();\n              }}\n            >\n              <Form.Group controlId=\"savingsBalance\">\n                <Form.Control\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Enter balance of savings\"\n                  name=\"savingsBalance\"\n                  value={this.state.savingsBalance}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>): void =>\n                    this.setState({\n                      savingsBalance: this.moneyValidation(e.target.value),\n                    })\n                  }\n                  onBlur={this.handleOnBlur}\n                />\n              </Form.Group>\n            </Form>\n          </Col>\n        </Row>\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default Balance;\n","import * as React from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\nimport { Goal } from \"./Editor\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst initialState = {\n  index: -1,\n  id: \"\",\n  itemGoalCost: 0.0,\n  name: \"\",\n};\nexport interface GoalItemProps {\n  editMode: boolean;\n  goal?: Goal;\n  editID?: string;\n  handleSubmit: (goals: Goal) => void;\n  onCancelAddGoal: () => void;\n  updateGoal?: (goal: Goal) => void;\n}\nexport interface GoalItemState {\n  index: number;\n  id: string;\n  itemGoalCost: number;\n  name: string;\n}\n\nclass GoalItem extends React.Component<GoalItemProps, GoalItemState> {\n  constructor(props: GoalItemProps) {\n    super(props);\n    if (this.props.editMode && this.props.goal) {\n      let currentGoal: Goal = this.props.goal;\n      this.state = {\n        id: currentGoal.id,\n        itemGoalCost: currentGoal.itemGoalCost,\n        name: currentGoal.name,\n        index: currentGoal.index,\n      };\n    } else {\n      this.state = initialState;\n    }\n    this.moneyValidation = this.moneyValidation.bind(this);\n  }\n  /**\n   * Validates the goal cost you type in to the goal cost Text Box to make sure it is formatted correctly and converts to an number type\n   *\n   * @param value - The goal cost you want to save as a string\n   * @returns - The value as a number parsed correctly\n   *\n   */\n  moneyValidation(value: string): number {\n    return parseFloat(value) || 0;\n  }\n  render() {\n    return (\n      <div>\n        <Form\n          onSubmit={(e: React.FormEvent) => {\n            e.preventDefault();\n          }}\n        >\n          <Row>\n            <Col>\n              <h3 className=\"text-center\">\n                Please Enter Details of the item you would like to save for\n              </h3>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={{ span: 6, offset: 3 }}>\n              <Form.Group controlId=\"name\">\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Name\"\n                  name=\"name\"\n                  value={this.state.name}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>): void =>\n                    this.setState({\n                      name: e.target.value,\n                    })\n                  }\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={{ span: 6, offset: 3 }}>\n              <Form.Group controlId=\"itemGoalCost\">\n                <Form.Label>Cost</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Cost\"\n                  name=\"itemGoalCost\"\n                  value={this.state.itemGoalCost}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>): void =>\n                    this.setState({\n                      itemGoalCost: this.moneyValidation(e.target.value),\n                    })\n                  }\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={{ span: 1, offset: 3 }}>\n              <Button\n                variant=\"success\"\n                onClick={() => {\n                  //TODO bug -> don't allow 0 dollar or blank name\n                  this.props.editMode\n                    ? this.props.handleSubmit({\n                        index: this.state.index,\n                        id: this.state.id,\n                        name: this.state.name,\n                        itemGoalCost: this.state.itemGoalCost,\n                      })\n                    : this.props.handleSubmit({\n                        index: -1,\n                        id: this.state.id ? this.state.id : uuidv4(),\n                        name: this.state.name,\n                        itemGoalCost: this.state.itemGoalCost,\n                      });\n                }}\n              >\n                Save\n              </Button>\n            </Col>\n            <Col xs={{ span: 1, offset: 4 }}>\n              <Button\n                className=\"float-right\"\n                onClick={this.props.onCancelAddGoal}\n                variant=\"danger\"\n              >\n                Cancel\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default GoalItem;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport { TrashIcon, PencilIcon } from \"@primer/octicons-react\";\n\nexport interface ActionsCellProps {\n  id: string;\n  handleViewEdit: (text: string) => void;\n  handleDelete: (text: string) => void;\n}\nexport interface ActionsCellState {}\n\nclass ActionsCell extends React.Component<ActionsCellProps, ActionsCellState> {\n  constructor(props: ActionsCellProps) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col xs={1}>\n            <Button\n              variant=\"link\"\n              onClick={() => this.props.handleViewEdit(this.props.id)}\n            >\n              <PencilIcon fill=\"#000\" size={16} />\n            </Button>\n          </Col>\n          <Col xs={1}>\n            <Button\n              variant=\"link\"\n              onClick={() => this.props.handleDelete(this.props.id)}\n            >\n              <TrashIcon fill=\"#000\" size={16} />\n            </Button>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default ActionsCell;\n","import * as React from \"react\";\nimport { Badge, Card, Col, ProgressBar, Row } from \"react-bootstrap\";\nimport ActionsCell from \"./ActionsCell\";\nexport interface SavingsCardProps {\n  index: number;\n  id: string;\n  bankBalance: number;\n  itemGoalCost: number;\n  name: string;\n  editGoal: (goalID: string) => void;\n  deleteGoal: (goalID: string) => void;\n}\n\nexport interface SavingsCardState {}\n\nclass SavingsCard extends React.Component<SavingsCardProps, SavingsCardState> {\n  constructor(props: SavingsCardProps) {\n    super(props);\n    this.state = {};\n  }\n  /**\n   * Provides the name of the color you want to use for the progressBar/Badges depending on how close to your goals you are\n   *\n   * @param percentage - The percent of goal Cost divided by Savings Balance\n   * @returns - The string for correct coloring for bootstrap\n   *\n   */\n  progressBarColor(percentage: number): string {\n    if (percentage >= 100) {\n      return \"success\";\n    } else if (percentage >= 50 && percentage < 100) {\n      return \"warning\";\n    } else {\n      return \"danger\";\n    }\n  }\n  render() {\n    const now = Math.round(\n      (this.props.bankBalance / this.props.itemGoalCost) * 100\n    );\n    const progressInstance = (\n      <ProgressBar\n        max={100}\n        now={now}\n        label={`${now}%`}\n        variant={this.progressBarColor(now)}\n      />\n    );\n\n    return (\n      <div>\n        <Card body>\n          <Card.Title>\n            {this.props.name}\n            <h5>\n              <Badge pill variant={this.progressBarColor(now)}>\n                ${this.props.bankBalance}\n              </Badge>{\" \"}\n              of{\" \"}\n              <Badge pill variant=\"primary\">\n                ${this.props.itemGoalCost}\n              </Badge>\n            </h5>\n          </Card.Title>\n\n          <Row>\n            <Col sm={11}>{progressInstance}</Col>\n            <Col sm={1}>\n              <ActionsCell\n                id={this.props.id}\n                handleViewEdit={this.props.editGoal}\n                handleDelete={this.props.deleteGoal}\n              />\n            </Col>\n          </Row>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default SavingsCard;\n","import * as React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { Goal } from \"./Editor\";\nimport SavingsCard from \"./SavingsCard\";\n\nexport interface GoalsProps {\n  goals: { index: number; id: string; itemGoalCost: number; name: string }[];\n  updateGoals: (goals: Goal[]) => void;\n  editGoal: (goalID: string) => void;\n  deleteGoal: (goalID: string) => void;\n  savingsBalance: number;\n}\n\nexport interface GoalsState {}\n\nclass Goals extends React.Component<GoalsProps, GoalsState> {\n  constructor(props: GoalsProps) {\n    super(props);\n    this.state = {};\n    this.handleOnDragEnd = this.handleOnDragEnd.bind(this);\n  }\n\n  handleOnDragEnd(result: any) {\n    if (!result.destination) return;\n\n    const items = Array.from(this.props.goals);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    this.props.updateGoals(items);\n  }\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.handleOnDragEnd}>\n        <Droppable droppableId=\"characters\">\n          {(provided) => (\n            <ul\n              className=\"characters\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {this.props.goals.map(({ id, itemGoalCost, name }, index) => {\n                return (\n                  <Draggable key={id} draggableId={id} index={index}>\n                    {(provided) => (\n                      <li\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                      >\n                        <SavingsCard\n                          editGoal={this.props.editGoal}\n                          deleteGoal={this.props.deleteGoal}\n                          index={index}\n                          bankBalance={this.props.savingsBalance}\n                          id={id}\n                          itemGoalCost={itemGoalCost}\n                          name={name}\n                        />\n                      </li>\n                    )}\n                  </Draggable>\n                );\n              })}\n              {provided.placeholder}\n            </ul>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default Goals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nimport Editor from './components/Editor';\nimport './stylesheets/main.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}